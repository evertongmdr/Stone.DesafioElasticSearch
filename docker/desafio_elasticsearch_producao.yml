services:
  elasticsearch-node-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: elasticsearch-node1
    environment:
      - node.name=elasticsearch-node-1
      - cluster.name=elasticsearch-cluster
      - discovery.seed_hosts=elasticsearch-node-2
      - cluster.initial_master_nodes=elasticsearch-node-1,elasticsearch-node-2
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch1_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"

  elasticsearch-node-2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: elasticsearch-node2
    environment:
      - node.name=elasticsearch-node-2
      - cluster.name=elasticsearch-cluster
      - discovery.seed_hosts=elasticsearch-node-1
      - cluster.initial_master_nodes=elasticsearch-node-1,elasticsearch-node-2
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch2_data:/usr/share/elasticsearch/data
    ports:
      - "9201:9200"
    depends_on:
      - elasticsearch-node-1

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    container_name: kibana
    depends_on:
      - elasticsearch-node-1
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-node-1:9200
    ports:
      - "5601:5601"

  zookeeper:
    image: zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka-broker-1:
    image: confluentinc/cp-kafka:7.1.0
    container_name: kafka-desafio-elasticsearch1
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-desafio-elasticsearch1:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    volumes:
      - kafka1_data:/var/lib/kafka/data

  kafka-broker-2:
    image: confluentinc/cp-kafka:7.1.0
    container_name: kafka-desafio-elasticsearch2
    depends_on:
      - zookeeper
    ports:
      - "9095:9095"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-desafio-elasticsearch2:9092,PLAINTEXT_HOST://localhost:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    volumes:
      - kafka2_data:/var/lib/kafka/data

  infra-init:
    container_name: infra-init
    build:
      context: ../infra
      dockerfile: Dockerfile
    depends_on:
      - elasticsearch-node-1
      - elasticsearch-node-2
      - kafka-broker-1
      - kafka-broker-2
      
    volumes:
      - ../infra/scripts:/scripts
      - ../infra/elasticsearch:/elasticsearch
    entrypoint: ["bash", "/scripts/infra-setup.sh"]

  app-transactions-producer:
    image: stone/transactions-producer-app:latest
    container_name: transactions-producer
    build: 
      context: ../src
      dockerfile: ./Stone.Transactions.Producer/Dockerfile
    restart: always
    environment:
      - DOTNET_ENVIRONMENT=Production
    depends_on:
      - infra-init

  app-transactions-consumer1:
    image: stone/transactions-consumer1-app:latest
    container_name: transactions-consumer1
    build: 
      context: ../src
      dockerfile: ./Stone.Transactions.Consumer/Dockerfile
    restart: always
    environment:
      - DOTNET_ENVIRONMENT=Production
      - CONTAINER_INSTANCE=container-1
    depends_on:
      - app-transactions-producer

  app-transactions-consumer2:
      image: stone/transactions-consumer2-app:latest
      container_name: transactions-consumer2
      build: 
        context: ../src
        dockerfile: ./Stone.Transactions.Consumer/Dockerfile
      restart: always
      environment:
        - DOTNET_ENVIRONMENT=Production
        - CONTAINER_INSTANCE=container-2
      depends_on:
        - app-transactions-producer

  app-transactions-consumer3:
      image: stone/transactions-consumer3-app:latest
      container_name: transactions-consumer3
      build: 
        context: ../src
        dockerfile: ./Stone.Transactions.Consumer/Dockerfile
      restart: always
      environment:
        - DOTNET_ENVIRONMENT=Production
        - CONTAINER_INSTANCE=container-3
      depends_on:
        - app-transactions-producer

  api-transactions:
        image: stone/transactions-api:latest
        container_name: transactions-api
        build: 
            context: ../src
            dockerfile: ./Stone.Transactions.API/Dockerfile
        ports:
            - "5201:5201"
            - "5202:5202"
        restart: always 
        environment: 
            - ASPNETCORE_ENVIRONMENT=Production
            - ASPNETCORE_URLS=http://*:5201
        depends_on:
            - elasticsearch-node-1
        
volumes:
  elasticsearch1_data:
  elasticsearch2_data:
  kafka1_data:
  kafka2_data:
